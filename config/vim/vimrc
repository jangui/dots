" ~/.vimrc

"sets , to leader key
let mapleader = ","

" Sets how many lines of history VIM has to remember
set history=500

"set line numbers
set number

" Enable syntax highlighting
syntax on 

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Avoid garbled characters in Chinese language windows OS
let $LANG='en' 
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

" Turn on the Wild menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
"set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set visualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
"set foldcolumn=1

" Enable 256 colors palette in Gnome Terminal
if $COLORTERM == 'gnome-terminal'
    set t_Co=256
endif

try
    colorscheme desert
catch
endtry

set background=dark

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Return to last edit position when opening files
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Always show the status line
"set laststatus=2

" Format the status line
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

" Remap VIM 0 to first non-blank character
map 0 ^

" Delete trailing white space on save, useful for some filetypes ;)
fun! CleanExtraSpaces()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    silent! %s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)
endfun

if has("autocmd")
    autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
endif

"set color of line numbers
highlight LineNr ctermfg=red

"use system clipboard
set clipboard=unnamedplus

""" WINDOW (SPLITS) MANAGEMENT / NAGIVATION """

"remap control-w + h/j/k/l to control-h/j/k/l (window navigation)
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

"remapping turning current window into tab
noremap <C-t> <C-w>T

"remapping close all windows in current tab except current window
noremap <C-o> <C-w>o

"remapping normalize all window sizes
noremap <C-=> <C-w>=

"change default vertical split to split below
set splitbelow

"change default horizontal split to split right
set splitright

"close current window
map <leader>c :close<cr>

"open file explore & open file in horizontal split
map <leader>h :Sexplore<cr>

"open file explore & open file in vertical split (on the right)
map <leader>v :Vexplore!<cr>

"open file explore & open file in vertical split (on the left)
map <leader>vl :Vexplore<cr>

""" MISC MAPPINGS """

"toggle between spell checking
map <leader>ss :setlocal spell!<cr>

"disable line numbers
map <leader>nn :set nonumber<cr>

"enable line numbers
map <leader>n :set number<cr>

"run a shell
map <leader>s :shell<cr>

"make (Makefile in cwd)
map <leader>m :make<cr>

"make clean (Makefile in cwd)
map <leader>mc :make clean<cr>

